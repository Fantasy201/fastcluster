# version format
version: 1.1.26-{build}

environment:
  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON_VERSION: "2.7"
      MINICONDA: "C:\\Miniconda"

    - PYTHON_VERSION: "2.7"
      MINICONDA: "C:\\Miniconda-x64"

    - PYTHON_VERSION: "3.6"
      MINICONDA: "C:\\Miniconda36"

    - PYTHON_VERSION: "3.6"
      MINICONDA: "C:\\Miniconda36-x64"

    - PYTHON_VERSION: "3.7"
      MINICONDA: "C:\\Miniconda37"

    - PYTHON_VERSION: "3.7"
      MINICONDA: "C:\\Miniconda37-x64"

    - PYTHON_VERSION: "3.8"
      MINICONDA: "C:\\Miniconda3"

    - PYTHON_VERSION: "3.8"
      MINICONDA: "C:\\Miniconda3-x64"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - "%MINICONDA%\\Scripts\\conda create -q -y --name fastclusterbuild python=%PYTHON_VERSION%"
  - "%MINICONDA%\\Scripts\\conda install -q -y --name fastclusterbuild pip wheel unittest"
  - "%MINICONDA%\\Scripts\\activate fastclusterbuild"

  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.executable)\""
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"
  - "pip install .[test]"

build_script:
  # Build the compiled extension
  - "python setup.py build"

test_script:
  # Run the project tests
  - "python -m unittest discover"

after_test:
  # If tests are successful, create binary packages for the project.
  - "pip wheel -w dist --no-deps ."
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
